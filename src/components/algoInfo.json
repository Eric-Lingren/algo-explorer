{
    "algos": [
        {
            "name": "Bubble Sort",
            "best": "O(n)",
            "average": "O(n2)",
            "worst": "O(n2)",
            "overview": "Most sorting algorithms have better performance and are not more complex. This makes bubble sort a non-practical sorting algorithm to use.",
            "advantages": "The ability to detect if the list is sorted is quite efficent as it is built into the algorithm.  It is easy to write and understand. Data is sorted in place so there is little overhead.",
            "disadvantages": "Bubble Sort takes a long time to sort and the average time increases exponentially as the data set grows making it unsuitable for large datasets.",
            "howItWorks": "Bubble Sort begins at one side of the data and compares adjacent items. If they are in the wrong order, either ascending or descending, their locations are switched.  This pattern repeats through the dataset until no more swaps are needed. The simplest way to achieve this is with nested for loops."
        },
        {
            "name": "Insert Sort",
            "best": "O(n)",
            "average": "O(n2)",
            "worst": "O(n2)",
            "overview": "Insert Sort (also known as Insertion Sort) is a very simple sorting algorithm, similar to selection sort. The primary difference being that insert sort looks backwards for an insertion point where selection sort looks forward. It is not very efficent on large datasets.",
            "advantages": "Easy to build, moderately more efficent than bubble sort, good performance on small lists or presorted lists, opperates in place so space/ram requirements are minimal.",
            "disadvantages": "Insert sort doesn't perform well on large datasets since its speed is a factor of n (list length).",
            "howItWorks": "Insert sort is a looping sorting algorithm where the list is broken into two pieces, sorted and unsorted, and consumes one item per iteration. It runs through the unsorted portion, removes a selected item from the unsorted portion, finds the correct location for it in the sorted portion and inserts it there."
        },
        {
            "name": "",
            "best": "",
            "average": "",
            "worst": "",
            "overview": "",
            "advantages": "",
            "disadvantages": "",
            "howItWorks": ""
        }
    ]
}